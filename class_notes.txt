    SQL injections
-----

Craft input that mangles a SQL statement to return or do unexpected
or undesirable things


Attack anywhere that allows for user input (web forms (e.g., search,
login screens), URL parameters); web pages or web applications that 
use a SQL database (examples: MySQL, Postgres, Oracle, etc...)

Example: A SQL database table named 'movies'

id | title                | actor_actress
=========================================
1  | Star Wars Episode IV | Mark Hamill
2  | Star Wars Episode V  | Harrison Ford
3  | Star Wars Episode VI | Carrie Fisher
4  | Star Wars Episode IV | Harrison Ford
5  | The Fugitive         | Harrison Ford


SELECT * FROM movies WHERE actor_actress = 'Mark Hamill'

** Strings are single-quoted


query = "SELECT title FROM movies WHERE actor_actress = '$entry'"

What happens if $entry is ' ?

query = "SELECT title FROM movies WHERE actor_actress = '''"

$entry is whocares' or '1' = '1


Need to know names of database
    1. Guess - common names are 'users', 'account', etc
    2. Wordpress, Drupal - all tables have well-known naming convention 

Prevention -- validate your input
    1. Filter out special characters
    2. Limit data and privileges that a database
    2. Use prepared statements (e.g. Python)


------

Other attacks

1. Traversal - "just asking for it"
    Directory traversal attack - can see files that you aren't supposed to
    e.g. get the shadow, passwd files
    Has been patched in apache, nginx
    Still a problem with WordPress sites, e.g. wp-admin
    Prevention: set ht_access, don't run server in root, set appropriate file permissions

2. Cross-site request forgery
    Malicious website sends a request to a web application that a user is already
    Authenticated against from a different website
    Prevention: append unpredictable token to each request

3. Cookie tampering
    Parameter tampering: MiTM proxy to modify request before sending to server (e.g Tamper Data for Firefox)
    Cookies save information from visits to website (e.g shopping cart contents, whether you are logged in)
    Can modify cookies before you send them to server
    Prevention: server-side input validation

4. Remote code execution
    Attacker can execute code from a remote server

    SQL injection in forms, or URL
    http://67.23.79.113/hackme.php?id=system(%22ls%20-la%20/%22);

    Prevention: don't use eval function, which evaluates strings as code


----
Capture the Flag notes

<!-- Hmmm, the plot thickens... key{fcb26d5bbe8d9c813034ee6a2b40eb35a96c7ff4}-->


Wordpress login
0?):bFb?N78*c-L

karl username, user fireforce to brute force the password
key was in a private post called 'Congratulations'
I change the password...

----

Capture the Flag recap

    - in the real world, no hints
    - we usually build, not break
    - how to think like a bad guy

Next: prevention
    1. Code review
    2. Static analysis
    3. Learn what not to do

1. Just ask for it: /flag.txt

2. Packed refs: /.git/packed-refs
    - git folder has source code, configuration

3. Analyze the binary: the extension is wrong, tcpdump capture file
    'strings' command

4. SQL injection in address bar 
    payload = 'or 1 = 1'

5. Also SQL injection in username 
    payload = a' or '1' = '1'
    http://67.23.79.113/admin.php?

6. cookie tampering; change lg cookie to 'true' on main.php

7. go to /logout.php

8. SQL injection (union)
    - get table data from other tables
    - use SQLMAP, which automates injections

9. Not Global: look at local storage; 
   see base64 string (binary to text encoding scheme) 
   decode the string

10. Brute-force WordPress password
    - internet service provider can provide throttling to 
    prevent many requests to the same URL

---

static and dynamic analysis of programs

static - no execution of the code
    1. binary (black box)
    2. code (code review, white box)
        e.g. linters

    - full code coverage
    - can look for obvious code flaws
    - can't find flaws that depend on environment, e.g. imports

dynamic - system execution (trial and error in a real runtime environment)
    - no guarantee of full coverage
    - e.g. Valgrind

---

* More static and dynamic analysis *

What is static analysis?
    - Analyzing code or binary without executing it
    - Binary static analysis: decompiles and creates a graph of all the 
      branches of the control flow
    Pros:
        - full code coverage
    Cons:
        - can't detect runtime and environment flaws 
        - can't find configuration issues
        - hard to prove results are actual vulnerabilities


What is dynamic analysis?
    - Analyzing code by executing it (e.g. Valgrind)
        Pros:
        - can see what happens depending on real variables
        - can detect dependencies
        Cons:
            - no guarantee of full code coverage

How does static analysis work?
    1. Data flow analysis - captures data, control paths and graphs them
    2. Control graphs
    3. Taint analysis (e.g user input is always "contaminated", tainted,
       untrusted)
    4. Lexical analysis 
        - parse the source code?
        - use grep to find stuff like strcpy in C --> buffer overflow

Assignment 4: Risk assessment

---
November 14, 2014

Today's topic: Malware - malicious software

    - pop-ups, stealing information, ransom-ware
    - rampant in the Google Play store

Malware types:

    1. Virus - can spread by user opening files, piggybacks
        from user to user sharing files

    2. Worm - only works on networks, spreads through the
        network
            - can use known_hosts file
            - server logs
            - port scanning
            - service discovery
        First worm: Morris worm

    3. Trojan horse - you think you download a legit
        software, but it's actually malicious software

    4. Backdoor - software that gives unauthorized access 
        to your computer
            - open a port on a server, anyone that connects
            to this port you get access to cmd.exe or terminal
            - e.g tini - written in assembly(!)
                while running, an attacker can connect
                through telnet or netcat (nc)

    5. Rootkit - gives superuser access to an attacker 
        for a long time, undetected

    6. Botnet


www.virustotal.com - scans files, urls for known viruses
can change the binary with a hex editor, change the port
number of tini.ext


































